def merge_multitopic_node_edge_fc(TG,multi_node_name,placed_nodes_arr_fc,placed_edges_arr_fc):
    multitopics=[]
    edges_dict_list=list(TG.edges(data=True,keys=True))
    for c_node in multi_node_name:
        c_node_idx=TG.nodes[c_node]['index']
        linked_multitopic = []
        for i in range(len(edges_dict_list)):
            e_dict=edges_dict_list[i]
            check = (c_node in e_dict[0:2])
            if check:
                linked_multitopic.append(e_dict[2][0])
        multitopics.append((c_node,c_node_idx,linked_multitopic))

    multitopic_edges = []
    for i in range(len(multitopics)):
        c_node = multitopics[i]
        node_idx = [c_node[1]]
        linked_edge_idx = c_node[2]
        target_nodes = fetch_node_withidx(placed_nodes_arr_fc,node_idx)
        target_nodes_c_fc = np.mean(target_nodes[:,1:4],axis=0)
        moded_trans_fc = np.mod(target_nodes_c_fc,1) - target_nodes_c_fc
        target_nodes[:,1:4] = target_nodes[:,1:4] + moded_trans_fc

        target_edge_list = fetch_edge_withidx_sep(placed_edges_arr_fc,linked_edge_idx)
        target_nodes_c_fc = np.mean(target_nodes[:,1:4],axis=0)
        target_edges = centerize_edges_fc(target_edge_list,target_nodes_c_fc)
    
        multitopic_edge = np.vstack((target_nodes,target_edges))
        multitopic_edge[:,6]=[-1*i-2]*len(multitopic_edge)
        multitopic_edge[:,7]=['EDGE']*len(multitopic_edge)
        multitopic_edges.append(multitopic_edge)

    multitopic_edges_fcoords = np.vstack(multitopic_edges)

    return multitopic_edges_fcoords